=== Content of: ./next-env.d.ts ===
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

=========================

=== Content of: ./tailwind.config.ts ===
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        white: '#FFFDED',
        black: '#262626',
        orange: '#DF4800',
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
      typography: (theme: any) => ({
        DEFAULT: {
          css: {
            color: theme('colors.white'),
            a: {
              color: theme('colors.orange'),
              '&:hover': {
                color: theme('colors.white'),
              },
            },
            h1: {
              color: theme('colors.white'),
              fontWeight: 'bold',
              fontSize: '2rem',
              marginBottom: '1rem',
            },
            h2: {
              color: theme('colors.white'),
              fontSize: '1.5rem',
              marginBottom: '0.75rem',
            },
            h3: {
              color: theme('colors.white'),
              fontSize: '1.25rem',
              marginBottom: '0.5rem',
            },
            p: {
              color: theme('colors.white'),
              marginBottom: '1.25rem',
              lineHeight: '1.75',
            },
            img: {
              marginLeft: 'auto',
              marginRight: 'auto',
              display: 'block',
            },
          },
        },
        lg: {
          css: {
            h1: {
              fontSize: '2.5rem',
            },
            h2: {
              fontSize: '2rem',
            },
            h3: {
              fontSize: '1.75rem',
            },
          },
        },
      }),
    },
  },
  plugins: [require('@tailwindcss/typography')],
};

export default config;
=========================

=== Content of: ./package.json ===
{
  "name": "raulduke",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@tailwindcss/typography": "^0.5.13",
    "date-fns": "^3.6.0",
    "gray-matter": "^4.0.3",
    "next": "14.2.5",
    "react": "^18",
    "react-dom": "^18",
    "rehype-raw": "^7.0.0",
    "rehype-stringify": "^10.0.0",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "remark-rehype": "^11.1.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.5",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

=========================

=== Content of: ./tsconfig.json ===
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

=========================

=== Content of: ./src/app/[...slug]/page.tsx ===
// src/app/[...slug]/page.tsx
import { getPostData, getAllPosts } from '@/lib/markdown';
import Link from 'next/link';
import { format } from 'date-fns';

export async function generateStaticParams() {
    const allFolders = getAllPosts();
    return allFolders.flatMap((folder) =>
        folder.posts.map((post) => ({
            slug: post.slug.split('/'),
        }))
    );
}

export default async function PostPage({ params }: { params: { slug: string[] } }) {
    const slug = params.slug.join('/');
    const postData: any = await getPostData(slug);

    return (
        <div className='flex flex-col gap-3 px-6'>
            <Link href="/" className='text-orange hover:underline'>back</Link>
            <div className="flex flex-col">
                <h1 className='text-xl'>{postData.title}</h1>
                <p className="text-gray-500 text-sm lg:m-0 m-0">{format(new Date(postData.date), 'MMMM dd, yyyy')}</p>
                <div className='prose lg:prose-lg py-3' dangerouslySetInnerHTML={{ __html: postData.contentHtml }} />
            </div>
        </div>
    );
}

=========================

=== Content of: ./src/app/layout.tsx ===
import type { Metadata } from "next";
import  localFont from "next/font/local";
import "./globals.css";

import Header from "@/components/Header";

const avenir = localFont({
  src: [
    { path: '../../public/fonts/Avenir-Black-03.ttf', weight: '900', style: 'normal' },
    { path: '../../public/fonts/Avenir-BlackOblique-04.ttf', weight: '900', style: 'italic' },
    { path: '../../public/fonts/Avenir-Book-01.ttf', weight: '400', style: 'normal' },
    { path: '../../public/fonts/Avenir-BookOblique-02.ttf', weight: '400', style: 'italic' },
    { path: '../../public/fonts/Avenir-Heavy-05.ttf', weight: '700', style: 'normal' },
    { path: '../../public/fonts/Avenir-HeavyOblique-06.ttf', weight: '700', style: 'italic' },
    { path: '../../public/fonts/Avenir-Light-07.ttf', weight: '300', style: 'normal' },
    { path: '../../public/fonts/Avenir-LightOblique-08.ttf', weight: '300', style: 'italic' },
    { path: '../../public/fonts/Avenir-Medium-09.ttf', weight: '500', style: 'normal' },
    { path: '../../public/fonts/Avenir-MediumOblique-10.ttf', weight: '500', style: 'italic' },
    { path: '../../public/fonts/Avenir-Oblique-11.ttf', weight: '400', style: 'italic' },
    { path: '../../public/fonts/Avenir-Roman-12.ttf', weight: '400', style: 'normal' },
  ],
  variable: '--font-avenir',
});


export const metadata: Metadata = {
  title: {
    template: '%s | richard alvarez',
    default: 'richard alvarez',
  },
  description: 'Artist website of Richard Álvarez.',
  keywords: [
    'Rick Alvarez',
    'rick',
    'Alvarez',
    'dvi',
    'canon xl2',
    'Canon XL2',
    'glitch art',
    'raul duke',
    'Raoul Duke',
    'Raul Duke',
    'underground artist',
    'vfx',
    'chicago',
    'music scene',
    'music videos',
    'art',
    'poetry',
    'latinx art',
    'video art',
    'code',
    'programming',
    'p5js',
    'chicago underground artists',
    'cgi',
    'animation',
    'punk art',
    'youtube music videos',
    'nudity in music videos',
    'chicago underground film festival',
  ],
  openGraph: {
    siteName: 'raulduke.com',
    title: 'Richard Alvarez',
    description: 'Artist website of Richard Álvarez.',
    type: 'website',
    locale: 'en_US',
    url: 'https://raulduke.com',
    images: [
      {
        url: 'https://raulduke.com/og-image.jpg',
        width: 800,
        height: 650,
        alt: 'Richard Alvarez',
      },
    ],
  },
  metadataBase: new URL('https://raulduke.com'),
  icons: [
    { rel: 'icon', href: '/favicon.ico', url: '/favicon.ico' },
  ],
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
      </head>
      <body className={avenir.className + " flex flex-col bg-black text-white justify-center items-center min-h-[100svh]"}>
        {/*<Header></Header> */}
        <section className="flex flex-col grow justify-center items-center flex-1 w-6/12 md:w-4/12"> 
          {children}
        </section>
      </body>
    </html>
  );
}

=========================

=== Content of: ./src/app/page.tsx ===
/** == temporary  ==
// src/app/page.tsx
import { getAllPosts } from '@/lib/markdown';
import Link from 'next/link';

export default function HomePage() {
  const allFolders = getAllPosts();

  return (
    <div className="flex flex-col w-full h-full px-6 text-white">
      {allFolders.map((folder) => (
        <div key={folder.name} className="mb-3">
          {folder.name && (
            <h2 className="text-xl tracking-widest uppercase text-white">{folder.name}</h2>
          )}
          <ul className="list-none list-inside">
            {folder.posts.map((post) => (
              <li key={post.slug}>
                <Link href={`/${post.slug}`} className="text-orange hover:underline">
                  {post.title}
                </Link>
                &nbsp;&nbsp;
                <span className="text-sm text-gray-500">{post.date.toDateString()}</span>
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
}
**/

// src/app/page.tsx

export default function Index() {
    return (
	<>
	    <p>under construction</p>
	    <p>rá</p>
	</>
    );
};

=========================

=== Content of: ./src/app/globals.css ===
/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 255, 255, 255; /* White */
  --background-rgb: 38, 38, 38; /* Black */
  --orange-rgb: 223, 72, 0; /* Orange */
  --font-avenir: 'Avenir', sans-serif;
}

body {
  color: rgb(var(--foreground-rgb));
  background-color: rgb(var(--background-rgb));
  font-family: var(--font-avenir);
}

header {
  background-color: rgb(var(--background-rgb));
}

@layer components {
  .prose {
    max-width: 100%;
    color: white;
  }

  .prose h1 {
    color: white;
    font-weight: bold;
    font-size: 2rem;
    margin-top: 0;
    margin-bottom: 1rem;
    line-height: 1.1111111;
  }

  .prose h2 {
    color: white;
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .prose h3 {
    color: white;
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
  }

  .prose p {
    color: white;
    margin-bottom: 1.25rem;
    line-height: 1.75;
  }

  .prose img {
    margin-left: auto;
    margin-right: auto;
    display: block;
  }

  .prose figure {
    margin: 0;
  }

  .prose figcaption {
    color: white;
    text-align: center;
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }

  .prose iframe {
    width: 100%;
    height: 315px;
    margin: 0 auto;
    display: block;
  }

  @media (min-width: 640px) {
    .prose {
      max-width: 50%;
      color: white;
    }

    .prose h1 {
      font-size: 2.5rem;
    }

    .prose h2 {
      font-size: 2rem;
    }

    .prose h3 {
      font-size: 1.75rem;
    }

    .prose iframe {
      height: 450px;
    }
  }
}
=========================

=== Content of: ./src/components/Header.tsx ===
'use client';

import Link from 'next/link';
import { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';

const Header = () => {
    const [menuOpen, setMenuOpen] = useState(false);

    const toggleMenu = () => {
        setMenuOpen(!menuOpen);
    };

    return (
        <header className="w-full z-10 transition duration-300 flex items-center ease-in-out p-3 px-6 pt-6 bg-black">
            <Link href="/" aria-label="Richard Alvarez">
                <h1 className='text-xl uppercase tracking-widest whitespace-nowrap'>Rick Alvarez</h1>
            </Link>
            &nbsp;&nbsp;
            <Link className="text-orange hover:underline" href="/Richard_Alvarez_Resume.pdf">
                <h3 className='text-sm uppercase'>CV</h3>
            </Link>
            &nbsp;&nbsp;
            {/* <Link className="text-orange hover:underline" href="/contact">
                    <h3 className='text-sm uppercase'>Contact</h3>
                </Link> */}
        </header>
    );
};

export default Header;

=========================

=== Content of: ./src/lib/markdown.ts ===
// src/lib/markdown.ts
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import { remark } from 'remark';
import html from 'remark-html';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeStringify from 'rehype-stringify';
import rehypeRaw from 'rehype-raw';

const contentDirectory = path.join(process.cwd(), 'content');

interface PostData {
    slug: string;
    title: string;
    date: Date;
    contentHtml: string;
    fullPath: string;  // Store the full path
}

interface FolderData {
    name: string;
    posts: PostData[];
}

function slugify(name: string): string {
    return name.replace(/^\d+\.\s*/, '').replace(/\s+/g, '-').toLowerCase();
}

export function getAllPosts(directory = contentDirectory, relativePath = ''): FolderData[] {
    const dirEntries = fs.readdirSync(directory, { withFileTypes: true });
    const folders: FolderData[] = [];

    dirEntries.forEach((entry) => {
        if (entry.isDirectory()) {
            const folderName = entry.name.replace(/^\d+\.\s*/, ''); // Remove leading numbers and dot
            const folderSlug = slugify(folderName);
            const folderPath = path.join(directory, entry.name);
            const folderPosts = getAllPosts(folderPath, path.join(relativePath, folderSlug));
            folders.push(...folderPosts);
        } else if (entry.isFile() && entry.name.endsWith('.md')) {
            const filePath = path.join(directory, entry.name);
            const fileContents = fs.readFileSync(filePath, 'utf8');
            const matterResult = matter(fileContents);

            const processedContent = remark()
                .use(remarkParse)
                .use(remarkRehype, { allowDangerousHtml: true })
                .use(rehypeRaw)
                .use(rehypeStringify)
                .processSync(matterResult.content)
                .toString();

            const postData: PostData = {
                slug: path.join(relativePath, slugify(entry.name.replace(/\.md$/, ''))).replace(/\\/g, '/'),
                title: matterResult.data.title || entry.name.replace(/\.md$/, '').replace(/^\d+\.\s*/, ''),
                date: new Date(matterResult.data.date || Date.now()),
                contentHtml: processedContent,
                fullPath: filePath,  // Store the full path
            };

            const folderIndex = folders.findIndex((folder) => folder.name === relativePath);
            if (folderIndex === -1) {
                folders.push({ name: relativePath, posts: [postData] });
            } else {
                folders[folderIndex].posts.push(postData);
            }
        }
    });

    return folders;
}

export async function getPostData(slug: string) {
    const allFolders = getAllPosts();
    let fullPath = '';

    allFolders.forEach((folder) => {
        folder.posts.forEach((post) => {
            if (post.slug === slug) {
                fullPath = post.fullPath;
            }
        });
    });

    if (!fullPath) {
        throw new Error(`Post with slug ${slug} not found`);
    }

    const fileContents = fs.readFileSync(fullPath, 'utf8');
    const matterResult = matter(fileContents);
    const processedContent = await remark()
        .use(remarkParse)
        .use(remarkRehype, { allowDangerousHtml: true })
        .use(rehypeRaw)
        .use(rehypeStringify)
        .process(matterResult.content);
    const contentHtml = processedContent.toString();

    return {
        slug,
        contentHtml,
        ...matterResult.data,
    };
}
=========================

